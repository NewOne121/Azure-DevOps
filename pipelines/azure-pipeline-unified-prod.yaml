resources:
  repositories:
    - repository: reponame
      type: git
      name: project/reponame
      ref: $(reponame.repo.ref)

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: DevOps
  - name: TARGET
    value: prod

stages:
  - stage: 'Deploy_jobs_to_Databricks'
    jobs:
      - job:
        workspace:
          clean: all
        steps:
          - checkout: reponame
            condition: and(succeededOrFailed(), eq(variables['src.project'], 'reponame'))
          - script: python -m pip install --upgrade pip setuptools wheel requests pyyaml argparse
            displayName: 'Install_python_deps'
          - task: Bash@3
            displayName: 'Set_pipeline_environment'
            inputs:
              targetType: 'inline'
              failOnStderr: true
              script: |
                python $SYSTEM_DEFAULTWORKINGDIRECTORY//pipelines/scripts/setup_environment.py --project $SRC_PROJECT || echo "echo $?; kill -9 $$" | bash
                cat $(echo $SYSTEM_DEFAULTWORKINGDIRECTORY/$SRC_PROJECT/deployment/vars/pipeline.env) | sed -rn 's#^"?(.*)?\"{1}$#\1#p'
            env:
              APIUSER: $(devops_apiuser)
              APIPASS: $(devops_apipass)

          - task: Bash@3
            displayName: 'Override default variables'
            condition: and(succeeded(), eq(variables['env.override'], 'true'))
            inputs:
              targetType: 'inline'
              script: |
                python $SYSTEM_DEFAULTWORKINGDIRECTORY//pipelines/scripts/setup_environment.py --override
            env:
              APIUSER: $(devops_apiuser)
              APIPASS: $(devops_apipass)

          - task: Bash@3
            displayName: 'Validate_package_versions'
            condition: and(succeeded(), eq(variables['env.override'], 'true'))
            inputs:
              targetType: 'inline'
              failOnStderr: true
              script: |
                python $SYSTEM_DEFAULTWORKINGDIRECTORY//pipelines/scripts/setup_environment.py --validate\
                || echo "kill -9 $$" | bash
            env:
              APIUSER: $(devops_apiuser)
              APIPASS: $(devops_apipass)

          - task: Bash@3
            displayName: 'Debug env'
            inputs:
              targetType: 'inline'
              script: |
                printenv

          - task: PowerShell@2
            displayName: 'Debug env powershell'
            inputs:
              targetType: 'inline'
              script: 'dir env:'

          - task: DownloadPackage@1
            displayName: 'Get latest configuration package'
            inputs:
              packageType: 'maven'
              feed: ''
              view: ''
              definition: '$(configuration.packageid)'
              version: '$(configuration.package.version)'
              downloadPath: '$(System.DefaultWorkingDirectory)'

          - task: Bash@3
            displayName: 'Debug'
            inputs:
              targetType: 'inline'
              script: |
                ls -la $AGENT_WORKFOLDER
                ls -la $AGENT_WORKFOLDER/_temp
                printenv

          - task: replacetokens@3
            displayName: 'Replace tokens in  yaml config files'
            inputs:
              targetFiles: '$(Agent.WorkFolder)\_temp\**\*.yaml'
            env:
              KEYVAULT_TENANTID: $(prod_keyvault_tenantId)
              KEYVAULT_CLIENTID: $(prod_keyvault_clientId)
              KEYVAULT_CLIENTSECRET: $(prod_keyvault_clientSecret)
              CASSANDRA_PASSWORD: $(prod_cassandra_password)
              DATABRICKS_USERNAME: $(prod_databricks_sc_username)

          - task: Bash@3
            displayName: 'Debug'
            inputs:
              targetType: 'inline'
              script: |
                for file in  $(find $AGENT_WORKFOLDER/_temp -type f -name '*.yaml'); do
                  echo $file; cat $file; echo; echo; echo; done

          - task: Bash@3
            displayName: 'Deploy configurations to Databricks'
            inputs:
              targetType: 'inline'
              script: |
                databricksJarPath="$(find $SYSTEM_DEFAULTWORKINGDIRECTORY -type f -name 'deployment*.jar')"

                for JARFILE in $(find ${SYSTEM_DEFAULTWORKINGDIRECTORY} -type f -name '*\.jar');
                do
                  mv $JARFILE $(echo $JARFILE | tr '[:upper:]' '[:lower:]');
                done

                if $(printenv | grep -i 'package_deploy' | grep -q true);
                then
                  mkdir $SYSTEM_DEFAULTWORKINGDIRECTORY/deploy;
                  for included in $(printenv | grep -i 'package_deploy' | grep true | egrep -vi 'placeholder');
                  do
                    addpackage=$(echo $included | sed -rn 's#(.*)_PACKAGE_DEPLOY(.*)*#\L\1#p')
                    if [ "$addpackage" != "" ];
                    then
                      echo "Included package: $addpackage";
                      cp -r $AGENT_WORKFOLDER/_temp/$addpackage $SYSTEM_DEFAULTWORKINGDIRECTORY/deploy/;
                    else
                      echo "No packages were included in deployment, aborting"
                      kill -9 $$
                    fi
                  done
                fi

                for file in $(find $SYSTEM_DEFAULTWORKINGDIRECTORY/deploy/ -mindepth 1 -type f);
                do
                  mv $file $SYSTEM_DEFAULTWORKINGDIRECTORY/deploy
                done

                find $SYSTEM_DEFAULTWORKINGDIRECTORY/deploy -mindepth 1 -type d -print0 | xargs -0 rm -r
                ls -la $SYSTEM_DEFAULTWORKINGDIRECTORY/deploy
                for item in $(find $SYSTEM_DEFAULTWORKINGDIRECTORY/deploy -type f -name '*deployment.yaml');
                do
                  java -version;
                  echo "java -cp $databricksJarPath .common.deployment.Deploy --verbose --config $item";
                  if [ -z "$DRY_RUN" ];
                  then
                    java -cp $databricksJarPath .common.deployment.Deploy --verbose --config $item;
                  fi
                done